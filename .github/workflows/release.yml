name: Release

on:
  pull_request:
    branches:
      - main
#    types:
#      - closed

concurrency:
  group: ${{ github.ref }}-${{ github.workflow }}
  cancel-in-progress: true

jobs:
  Infra:
#    if: github.event.pull_request.merged == true && startsWith(github.head_ref, 'release/')
    runs-on: ubuntu-latest
    environment: Production
    permissions:
      id-token: write
      contents: write
    steps:
      - uses: actions/checkout@v4

      - name: AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/GitHubDeployBase
          role-session-name: ${{ vars.SESSION_NAME }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: SAM Deploy Role
        run: |
          cd infra/role
          sam build
          sam package
          sam deploy --no-fail-on-empty-changeset

      - name: AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/GitHubDeployCoreOceanOrchestration
          role-session-name: ${{ vars.SESSION_NAME }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: SAM Deploy Cluster
        run: |
          cd infra/cluster
          sam build --parameter-overrides ParameterKey=AgentToken,ParameterValue=${{ secrets.AGENT_TOKEN }} ParameterKey=Vpc,ParameterValue=${{ secrets.VPC_ID }} ParameterKey=Subnets,ParameterValue=${{ secrets.SUBNET_IDS }}
          sam package
          sam deploy --no-fail-on-empty-changeset --parameter-overrides ParameterKey=AgentToken,ParameterValue=${{ secrets.AGENT_TOKEN }} ParameterKey=Vpc,ParameterValue=${{ secrets.VPC_ID }} ParameterKey=Subnets,ParameterValue=${{ secrets.SUBNET_IDS }}

  Dagster:
    runs-on: ubuntu-latest
    needs: Infra
    environment: Production
    permissions:
      id-token: write
      contents: write
    env:
      DAGSTER_CLOUD_ORGANIZATION: ${{ vars.DAGSTER_CLOUD_ORGANIZATION }}
      DAGSTER_CLOUD_API_TOKEN: ${{ secrets.AGENT_TOKEN }}
      DAGSTER_PROJECT_DIR: "orchestration"
      DAGSTER_CLOUD_YAML_PATH: "dagster_cloud.yaml"
      IMAGE_REGISTRY: ${{ vars.IMAGE_REGISTRY }}
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      DEPLOYMENT_ENV: ${{ vars.DEPLOYMENT_ENV }}

    steps:
      - name: Python 3.8
        uses: actions/setup-python@v5
        with:
          python-version: '3.8'

      - name: Pre-run checks
        id: prerun
        uses: dagster-io/dagster-cloud-action/actions/utils/prerun@v0.1

      - name: Checkout Orchestration
        uses: actions/checkout@v3
        if: steps.prerun.outputs.result != 'skip'
        with:
          ref: ${{ github.head_ref }}
          path: orchestration

      - name: Checkout Pipelines
        uses: actions/checkout@v3
        if: steps.prerun.outputs.result != 'skip'
        with:
          repository: tiki/core-ocean-pipelines
          token: ${{ secrets.GH_PROJECT_PAT }}
          path: pipelines
          ref: main

      - name: AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/GitHubDeployCoreOceanOrchestration
          role-session-name: ${{ vars.SESSION_NAME }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Add Pipelines
        run: |
          mkdir orchestration/dbt_pipelines/compiled
          cd pipelines
          python3 -m pip install dbt-athena-community
          dbt deps
          dbt compile --target prod
          cp -r target ../orchestration/dbt_pipelines/compiled/target
          cp dbt_project.yml ../orchestration/dbt_pipelines/compiled

      - name: SetVars
        run: |
          sed -i 's|${vars.IMAGE_REGISTRY}|${{ vars.IMAGE_REGISTRY }}|' orchestration/dagster_cloud.yaml

      - name: Validate configuration
        id: ci-validate
        if: steps.prerun.outputs.result != 'skip'
        uses: dagster-io/dagster-cloud-action/actions/utils/dagster-cloud-cli@v0.1
        with:
          command: "ci check --project-dir ${{ env.DAGSTER_PROJECT_DIR }} --dagster-cloud-yaml-path ${{ env.DAGSTER_CLOUD_YAML_PATH }}"

      - name: Initialize build session
        id: ci-init
        if: steps.prerun.outputs.result != 'skip'
        uses: dagster-io/dagster-cloud-action/actions/utils/ci-init@v0.1
        with:
          project_dir: ${{ env.DAGSTER_PROJECT_DIR }}
          dagster_cloud_yaml_path: ${{ env.DAGSTER_CLOUD_YAML_PATH }}
          deployment: ${{ env.DEPLOYMENT_ENV }}

      - name: Generate docker image tag
        id: generate-image-tag
        if: steps.prerun.outputs.result != 'skip'
        run: echo "IMAGE_TAG=$GITHUB_SHA-$GITHUB_RUN_ID-$GITHUB_RUN_ATTEMPT" >> $GITHUB_ENV && echo $IMAGE_TAG

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/GitHubDeployCoreOceanOrchestration
          role-session-name: ${{ vars.SESSION_NAME }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Login to ECR
        if: steps.prerun.outputs.result != 'skip'
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build and upload Docker image for "dbt_pipelines"
        if: steps.prerun.outputs.result != 'skip'
        uses: docker/build-push-action@v4
        with:
          context: orchestration
          push: true
          tags: ${{ env.IMAGE_REGISTRY }}:${{ env.IMAGE_TAG }}-dbt_pipelines
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Update build session with image tag for dbt_pipelines
        id: ci-set-build-output-example-location
        if: steps.prerun.outputs.result != 'skip'
        uses: dagster-io/dagster-cloud-action/actions/utils/dagster-cloud-cli@v0.1
        with:
          command: "ci set-build-output --location-name=dbt_pipelines --image-tag=$IMAGE_TAG-dbt_pipelines"

      - name: Deploy to Dagster Cloud
        id: ci-deploy
        if: steps.prerun.outputs.result != 'skip'
        uses: dagster-io/dagster-cloud-action/actions/utils/dagster-cloud-cli@v0.1
        with:
          command: "ci deploy"

      - name: Update PR comment for branch deployments
        id: ci-notify
        if: steps.prerun.outputs.result != 'skip' && always()
        uses: dagster-io/dagster-cloud-action/actions/utils/dagster-cloud-cli@v0.1
        with:
          command: "ci notify --project-dir=${{ env.DAGSTER_PROJECT_DIR }}"

      - name: Generate a summary
        id: ci-summary
        if: steps.prerun.outputs.result != 'skip' && always()
        uses: dagster-io/dagster-cloud-action/actions/utils/dagster-cloud-cli@v0.1.27
        with:
          command: "ci status --output-format=markdown >> $GITHUB_STEP_SUMMARY"

#      - name: Get Version
#        id: semver
#        uses: ietf-tools/semver-action@v1
#        with:
#          token: ${{ github.token }}
#
#      - name: Create Release
#        uses: ncipollo/release-action@v1
#        with:
#          tag: ${{ steps.semver.outputs.nextStrict }}
